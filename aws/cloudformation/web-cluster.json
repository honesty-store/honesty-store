{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "",
  "Parameters": {
    "VpcCidrBlock": {
      "Type": "String",
      "Description": "E.g. 10.1.0.0/16"
    },
    "SubnetACidrBlock": {
      "Type": "String",
      "Description": "Must be a subnet of the VpcCidrBlock"
    },
    "SubnetBCidrBlock": {
      "Type": "String",
      "Description": "Must be a subnet of the VpcCidrBlock"
    },
    "SubnetCCidrBlock": {
      "Type": "String",
      "Description": "Must be a subnet of the VpcCidrBlock"
    },
    "AmiImageId": {
      "Type": "String",
      "Description": "The latest Amazon ECS-optimised AMIs are listed at http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html"
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCidrBlock"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "SubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "SubnetACidrBlock"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "SubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "SubnetBCidrBlock"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "SubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "SubnetCCidrBlock"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "DhcpOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              ".compute.internal"
            ]
          ]
        },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "VpcDhcp": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "DhcpOptionsId": {
          "Ref": "DhcpOptions"
        }
      }
    },
    "NetworkAclAllowAll": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "NetworkAclAllowAllEgress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "NetworkAclAllowAll"
        }
      }
    },
    "NetworkAclAllowAllIngress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "NetworkAclAllowAll"
        }
      }
    },
    "SubnetANetworkAcl": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetA"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclAllowAll"
        }
      }
    },
    "SubnetBNetworkAcl": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetB"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclAllowAll"
        }
      }
    },
    "SubnetCNetworkAcl": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetC"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclAllowAll"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "VpcInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "RouteInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": "VpcInternetGateway"
    },
    "SubnetARouteTable": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetA"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetBRouteTable": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetB"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetCRouteTable": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetC"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SecurityGroupAllowVpc": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow VPC traffic",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "SecurityGroupAllowVpcIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupAllowVpc"
        },
        "IpProtocol": "-1",
        "CidrIp": {
          "Ref": "VpcCidrBlock"
        }
      }
    },
    "SecurityGroupAllowVpcEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupAllowVpc"
        },
        "IpProtocol": "-1",
        "CidrIp": {
          "Ref": "VpcCidrBlock"
        }
      }
    },
    "SecurityGroupAllowAllEgressOnly": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow all egress traffic",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "SecurityGroupAllowAllEgressOnlyEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupAllowAllEgressOnly"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "SecurityGroupAllowAll": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow all traffic",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "SecurityGroupAllowAllIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupAllowAll"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "SecurityGroupAllowAllEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupAllowAll"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "MaxSize": "10",
        "MinSize": "1",
        "VPCZoneIdentifier": [
          {
            "Ref": "SubnetA"
          },
          {
            "Ref": "SubnetB"
          },
          {
            "Ref": "SubnetC"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "TerminationPolicies": [
          "Default"
        ]
      }
    },
    "Cluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {}
    },
    "Ec2InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ]
      }
    },
    "Ec2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "Ec2InstanceRole"
          }
        ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 8
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "Ec2InstanceProfile"
        },
        "ImageId": {
          "Ref": "AmiImageId"
        },
        "InstanceType": "t2.micro",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupAllowVpc"
          },
          {
            "Ref": "SecurityGroupAllowAllEgressOnly"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "Cluster"
                },
                " > /etc/ecs/ecs.config\n"
              ]
            ]
          }
        }
      },
      "DependsOn": "VpcInternetGateway"
    },
    "ScalingPolicyDown": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "Cooldown": "300",
        "PolicyType": "SimpleScaling",
        "ScalingAdjustment": -1,
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        }
      }
    },
    "ScalingPolicyUp": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "Cooldown": "300",
        "PolicyType": "SimpleScaling",
        "ScalingAdjustment": 1,
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        }
      }
    },
    "AlarmMemoryReservationHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "MemoryReservation",
        "Namespace": "AWS/ECS",
        "Period": "60",
        "Statistic": "Maximum",
        "Threshold": "80.0",
        "AlarmActions": [
          {
            "Ref": "ScalingPolicyUp"
          }
        ],
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "Cluster"
            }
          }
        ]
      }
    },
    "AlarmMemoryReservationLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "MemoryReservation",
        "Namespace": "AWS/ECS",
        "Period": "60",
        "Statistic": "Maximum",
        "Threshold": "60.0",
        "AlarmActions": [
          {
            "Ref": "ScalingPolicyDown"
          }
        ],
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "Cluster"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "Vpc": {
      "Value": {
        "Ref": "Vpc"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Vpc"
        }
      }
    },
    "SubnetA": {
      "Value": {
        "Ref": "SubnetA"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SubnetA"
        }
      }
    },
    "SubnetB": {
      "Value": {
        "Ref": "SubnetB"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SubnetB"
        }
      }
    },
    "SubnetC": {
      "Value": {
        "Ref": "SubnetC"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SubnetC"
        }
      }
    },
    "SecurityGroupAllowAll": {
      "Value": {
        "Ref": "SecurityGroupAllowAll"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SecurityGroupAllowAll"
        }
      }
    },
    "SecurityGroupAllowVpc": {
      "Value": {
        "Ref": "SecurityGroupAllowVpc"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SecurityGroupAllowVpc"
        }
      }
    },
    "Cluster": {
      "Value": {
        "Ref": "Cluster"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Cluster"
        }
      }
    }
  }
}