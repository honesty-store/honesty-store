sudo: false
language: node_js
notifications:
  email: false
services:
  - docker
node_js:
  - node
env:
  global:
    - secure: "zXcmNY/5n9FzQ3XLPpLPE0GYEJPm+K6Wg/X40G9O5dO4kcOyEPtCXScE4OnRTDrfAD5LfnGaBWfEHrRt3bI6rGVJawycZT2j+bLQu4UobYUUiHkcNqOsdNBpIvn8LklvsIOEgMowRCzGWUrHQEz+13RhEarzFKFqMYnvDEaXyjvSeUnLA58e+bvzln+4WLgUo/EKJuK8qCq592fk/SWzA2NHhoqgN5XKMk/PAqXBOV6cO001m+pNVBQEWZ7sfJWugAhX4DNNRY36DM6qx2mgdKeVnWckJFpwoQOzXXBdwB7g8ADqXL1mb70ik3ADckFTjFmuxD7IhoHOoTzABkod0aS4r46SlKc7aE//kvieV0gbWff69oIXdE5flTjTIE2dKs5EFGKz6E/rZ8J7xRgc+MQIqPPAHqSt03SMGdsBtk6w35JqyQIYpqKnGz+RWUcHI/qR0ODDtM9RatmlPfptNG5Bg2eWlav7Gq+zIm4tLtVCRvCxN+Gb61KUGK8HpeqS/8OpMWVnm1uuEevtIvqI4Pa8RqdsssWqOzxgu92PQ4/e3bGgUzD7PZkLOYra28mao0elTgoWGjtRkueJxgmpEVoCNPY52tnN1UkpPMuW/R32N3MGrV4Nj0brrwTB1m6LdMeFb1JmG2Q1KOlpn9NrefZy0TduJ9+i32CRbLkvudo="
    - secure: "LdJbBa+i4bd5AhyumkGR5PPhAqZhtHrmzcNIiI/vN+lk+ECcRSe344GGxQwi28Sa5ytqeYFe0kCWcX+w9hbn3f+lTgaWRx0g05FNV6xGQhIfDs2XlorMeBZSn92z1aMYpDj8SNB39h7NZyh5KknFNhL1rrV9R8PT+DkrUdl0EnIKQYynYj1GKcwX7ql2HvGtenZLHJLkepTJj0aJzZPhTp/YfvN12izzPic8Oci4+94EIohfDLfcIKV21p3tjRcr8i4mMoSK063v06FuugC7+Twm1Fl+RZNpTfarkThllbxzKtvAyCsHb1aSRwNLLahOkUTWBJO3J7cL25hnp0+T6qehmB17jEMfts+k7dxd2qxFAOTXiVHfXrrkLtQYfcSO3mHfqrqSIGFPNkHwFM/GwIjwfqHzqjFbET088pgm2Q6KldFPNvwZ2gXnNcZScecYcTc3VMLCSrlAjsOReSVX613T2m79+dupVPycjKrks2FHBq7Rda+TwJCdW1/0hl9xtDcJoGIFUiL/nz1ZRKlAvTNilPdNeFRh/Yb1BpIXSHF2TzA/r5k3sncMLRhZPxRZfKetP8UaBKfRBVZo9z06JRK9PNanK5zF6aNwbpbfTZ6OVL6b4/2/cVr7r5mPIPGj6DVyJ8KrL6E0R/QtkcRGkZ/CuFPWIMEwFnKn/n/uP+g="
    # The key used by jwt to generate communication tokens for inter-service HTTP requests.
    # Master branch only. All other branches use keys derived from the branch name.
    # Eventually this will be secure/travis-encrypted.
    - LIVE_SERVICE_TOKEN_SECRET: 'abc'
    # The key used by jwt to create refresh and access tokens
    - LIVE_USER_TOKEN_SECRET: 'def'
script:
  - npm i -g yarn
  # install all dependencies first to prevent problems with cross-module dependencies
  - (cd api && yarn install)
  - (cd aws && yarn install)
  - (cd transaction && yarn install)
  - (cd user && yarn install)
  - (cd web && yarn install)
  - (cd topup && yarn install)
  - (cd service && yarn install)
  - (cd test && yarn install)
  # now we have all dependencies installed, do the compilation
  - (cd api && npm run ci)
  - (cd aws && npm run ci)
  - (cd transaction && npm run ci)
  - (cd user && npm run ci)
  - (cd web && npm run ci)
  - (cd topup && npm run ci)
  - (cd service && npm run ci)
  - (cd test && npm run ci)
  # prune back to production only dependencies for containerisation
  - (cd api && yarn install --production --ignore-scripts --prefer-offline)
  - (cd aws && yarn install --production --ignore-scripts --prefer-offline)
  - (cd transaction && yarn install --production --ignore-scripts --prefer-offline)
  - (cd user && yarn install --production --ignore-scripts --prefer-offline)
  - (cd web && yarn install --production --ignore-scripts --prefer-offline)
  - (cd topup && yarn install --production --ignore-scripts --prefer-offline)
  - (cd service && yarn install --production --ignore-scripts --prefer-offline)
  - (cd test && yarn install --production --ignore-scripts --prefer-offline)
  - ./aws/bin/aws deploy $TRAVIS_BRANCH api transaction user web topup
  - ./aws/bin/aws prune
